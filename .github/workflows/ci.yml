name: NestJS CI/CD Pipeline

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '22'

jobs:
  dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

  quality:
    name: Code Quality & Linting
    needs: dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline

      - name: Type Check
        run: npx tsc --noEmit

      - name: Lint Code
        run: npm run lint

      - name: Format Check
        run: |
          npm run format
          if [ -n "$(git status --porcelain)" ]; then
            echo "❌ Code is not properly formatted"
            git diff
            exit 1
          fi
          echo "✅ Code formatting is correct"

  test:
    name: Unit Tests
    needs: [dependencies, quality]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 6379:6379

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline

      - name: Setup Test Environment
        run: |
          echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" > .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test
          echo "JWT_SECRET=test-jwt-secret-key" >> .env.test

      - name: Generate Prisma Client
        run: npm run db:generate

      - name: Setup Test Database
        run: |
          npm run db:push
          npm run db:seed
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db

      - name: Run Unit Tests
        run: npm run test -- --coverage --passWithNoTests
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

      - name: Upload Coverage
        uses: codecov/codecov-action@v4
        if: success()
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build & Package
    needs: [quality, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline

      - name: Generate Prisma Client
        run: npm run db:generate

      - name: Build Application
        run: npm run build

      - name: Cache Build
        uses: actions/cache@v4
        with:
          path: |
            dist
            node_modules/.prisma
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Create Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          cat > Dockerfile << 'EOF'
          FROM node:20-alpine

          WORKDIR /app

          # Copy package files
          COPY package*.json ./
          RUN npm ci --omit=dev && npm cache clean --force

          # Copy application files
          COPY dist ./dist
          COPY src/prisma ./src/prisma

          # Generate Prisma client
          RUN npx prisma generate --schema=./src/prisma/schemas/

          EXPOSE 3000

          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD curl -f http://localhost:3000/health || exit 1

          CMD ["node", "dist/main.js"]
          EOF

      - name: Build Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t amazon-be:${{ github.sha }} .
          docker tag amazon-be:${{ github.sha }} amazon-be:latest

  security:
    name: Security Audit
    needs: dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci --prefer-offline

      - name: Run Security Audit
        run: |
          npm audit --audit-level=moderate
          echo "✅ Security audit completed"

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
